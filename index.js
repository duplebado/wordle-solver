const words = require('an-array-of-english-words');
const readline = require('readline');

const rl = readline.createInterface({
  input: process.stdin,
  output: process.stdout
});

const WORD_LENGTH = 5;

const wordClue = {
    exclude: "",
    include: "",
    correctPosition: {
        1: null,
        2: null,
        3: null,
        4: null,
        5: null
    }
}

let possibleWords = words.filter(d => d.length === WORD_LENGTH);

console.log("\nWelcome to Wordle solver\n");
console.log("--------------------------------------------------------------------------------\n");

let currentWord;
let helpedGenerateFirstWord = false;

const generateFirstWord = () => {
    return possibleWords[Math.floor(Math.random() * possibleWords.length)];
}

const askIfFirstWordBeAutogenerated = () => {
    return new Promise((resolve, reject) => {
      rl.question("Do you want me to give you a word to start with ?  ", (answer) => {
        resolve(answer)
      });
    });
};


const getUserGeneratedFirstWord = () => {
    return new Promise((resolve, reject) => {
      rl.question("\nWhat word did you decide to start with ?  ", (answer) => {
        resolve(answer)
      });
    });
};

const getColorRepresentation = () => {
    return new Promise((resolve, reject) => {
      rl.question("\nWhat was the colorRepresentation ?  ", (answer) => {
        resolve(answer)
      });
    });
};

const checkResultValidity = (result) => {
    if (result.length !== WORD_LENGTH) {
        return false;
    }

    let patternern = /^[0-2]+$/;
    return pattern.test(result);
}

const checkWordValidity = (word) => {
    if (word.length !== WORD_LENGTH) {
        return false;
    }

    let pattern = /^[a-z]+$/;
    return pattern.test(word);
}


const addToclue = (word, colorRepresentation) => {
    for (let i = 0; i < WORD_LENGTH; i++) {
        if (colorRepresentation[i] === "0") {
            wordClue.exclude += word[i]
        } else if (colorRepresentation[i] === "1") {
            wordClue.include += word[i]
        } else if (colorRepresentation[i] === "2"){
            let keyName = String(Number(i) + 1)
            wordClue.correctPosition[keyName] = word[i]
        }
    }
}

const reevaluatePossibleWords =() => {
    let possibleWordsClone = [...possibleWords]
    possibleWordsClone = possibleWordsClone.filter(d => {
        let pattern = `[${wordClue.exclude}]`;
        let re = new RegExp(pattern);
        return re.test(d)
    });

    for (let key in wordClue.correctPosition) {
        if (wordClue.correctPosition[key] !== null) {
            possibleWordsClone = possibleWordsClone.filter(d => {
                let pattern = `^.{${Number(key)-1}}[${wordClue.correctPosition[key]}]`;
                let re = new RegExp(pattern);
                return re.test(d)
            });
        } 
    }

    return possibleWordsClone;
}

const checkIfResultIsCorrect = (colorRepresentation) => {
    let count = 0;
    for (let i = 0; i <= WORD_LENGTH; i++) {
        if (colorRepresentation[i] === "2") {
            count++
        }
    }

    return count === WORD_LENGTH;
}

  
const main = async () => {
    let numOfTrys = 1;
    let currentWord;

    let response = await askIfFirstWordBeAutogenerated();

    while (response !== "yes" && response !== "no") {
        console.log("\nValid response is 'yes' or 'no'. Try again please \n")
        response = await askIfFirstWordBeAutogenerated();
    }

    if (response === "yes"){
        currentWord = generateFirstWord();
        console.log("\nStart with this word ----> ", currentWord)
    } else {
        currentWord = await getUserGeneratedFirstWord();

        while (!checkWordValidity(currentWord)) {
            console.log(`\n====================================================================================================
                         \nValid word should be small letters and contain ${WORD_LENGTH} letters only. Please pick another word
                         \n====================================================================================================
                         `)
            currentWord = await getUserGeneratedFirstWord();
        }
    }

    let colorRepresentation = await getColorRepresentation();

    while (!checkResultValidity(result)) {
        console.log(`====================================================================================================
                     \n colorRepresentation should be exactly 5 characters (each a digit between 0 and 2) long                     
                     \n The digits 0 - 2 denotes color of each letter of the word
                     \n 0 means grey
                     \n 1 means yellow
                     \n 2 means green
                     \n Examples are: 01222, 00000, 01112, 22210, e.t.c
                     \n====================================================================================================`)

        colorRepresentation = await getColorRepresentation();
    }

    while (!checkIfResultIsCorrect(colorRepresentation)) {
        addToclue(currentWord, colorRepresentation);

        possibleWords = reevaluatePossibleWords();

        console.log("possible words", )
    }


    rl.close()
}
  
main();